# .github/workflows/deploy.yml
name: Deploy Movie Recommendation Backend

on:
  push:
    branches: [ main ]

env:
  DOCKER_IMAGE: movie-recommendation-backend

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        pip install -r requirements.txt
    
    - name: Run Django tests
      run: |
        python manage.py test --settings=movie_recommendation_backend.settings
      env:
        DATABASE_URL: sqlite:///test.db
    
    - name: Check Django migrations
      run: |
        python manage.py makemigrations --check --dry-run --settings=movie_recommendation_backend.settings
      env:
        DATABASE_URL: sqlite:///test.db

  build:
    needs: test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to Docker Hub
      if: github.ref == 'refs/heads/main'
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: ${{ github.ref == 'refs/heads/main' }}
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE }}:latest
          ${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE }}:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    needs: [test, build]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to Production Server
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          # Navigate to project directory
          cd /opt/movie-recommendation-backend
          
          # Pull latest code
          git pull origin main
          
          # Pull latest Docker image
          docker pull ${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE }}:latest
          
          # Update docker-compose.yml to use the new image
          sed -i 's|build: \.|image: ${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE }}:latest|g' docker-compose.yml
          
          # Stop and remove existing containers
          docker-compose down
          
          # Start services with latest image
          docker-compose up -d
          
          # Run migrations
          docker-compose exec -T backend python manage.py migrate
          
          # Collect static files
          docker-compose exec -T backend python manage.py collectstatic --noinput
          
          # Clean up old images
          docker image prune -f
          
          # Show running containers
          docker-compose ps