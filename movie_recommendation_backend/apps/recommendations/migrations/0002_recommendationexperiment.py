# Generated by Django 5.2.4 on 2025-08-02 06:13

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('recommendations', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='RecommendationExperiment',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(help_text='Unique name for this experiment', max_length=100, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('algorithm_a', models.CharField(choices=[('collaborative', 'Collaborative Filtering'), ('content_based', 'Content-Based Filtering'), ('hybrid', 'Hybrid Algorithm'), ('trending', 'Trending Movies'), ('demographic', 'Demographic-Based'), ('matrix_factorization', 'Matrix Factorization')], help_text='Control algorithm (usually current production algorithm)', max_length=50)),
                ('algorithm_b', models.CharField(choices=[('collaborative', 'Collaborative Filtering'), ('content_based', 'Content-Based Filtering'), ('hybrid', 'Hybrid Algorithm'), ('trending', 'Trending Movies'), ('demographic', 'Demographic-Based'), ('matrix_factorization', 'Matrix Factorization')], help_text='Test algorithm (new algorithm to test)', max_length=50)),
                ('traffic_split', models.FloatField(default=0.5, help_text='Percentage of traffic to algorithm_b (0.5 = 50/50 split)', validators=[django.core.validators.MinValueValidator(0.1), django.core.validators.MaxValueValidator(0.9)])),
                ('start_date', models.DateTimeField()),
                ('end_date', models.DateTimeField()),
                ('is_active', models.BooleanField(default=True)),
                ('target_metric', models.CharField(choices=[('ctr', 'Click-Through Rate'), ('engagement', 'User Engagement'), ('retention', 'User Retention'), ('conversion', 'Conversion Rate'), ('rating', 'Average Rating'), ('time_spent', 'Time Spent on Platform')], help_text='Primary metric to measure experiment success', max_length=50)),
                ('minimum_sample_size', models.IntegerField(default=1000, help_text='Minimum number of users needed for statistical significance')),
                ('confidence_level', models.FloatField(default=0.95, help_text='Statistical confidence level (0.95 = 95%)', validators=[django.core.validators.MinValueValidator(0.8), django.core.validators.MaxValueValidator(0.99)])),
                ('statistical_significance', models.FloatField(blank=True, help_text='Current statistical significance level', null=True)),
                ('winner_algorithm', models.CharField(blank=True, choices=[('collaborative', 'Collaborative Filtering'), ('content_based', 'Content-Based Filtering'), ('hybrid', 'Hybrid Algorithm'), ('trending', 'Trending Movies'), ('demographic', 'Demographic-Based'), ('matrix_factorization', 'Matrix Factorization')], help_text='Winning algorithm (if any)', max_length=50, null=True)),
                ('p_value', models.FloatField(blank=True, help_text='P-value of the statistical test', null=True)),
                ('effect_size', models.FloatField(blank=True, help_text='Effect size of the difference between algorithms', null=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_experiments', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Recommendation Experiment',
                'verbose_name_plural': 'Recommendation Experiments',
                'db_table': 'recommendation_experiments',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['is_active', 'start_date', 'end_date'], name='idx_experiments_active'), models.Index(fields=['start_date', 'end_date'], name='idx_experiments_date_range'), models.Index(fields=['target_metric'], name='idx_experiments_target_metric'), models.Index(fields=['algorithm_a', 'algorithm_b'], name='idx_experiments_algorithms')],
            },
        ),
    ]
