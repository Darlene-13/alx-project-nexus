# Generated by Django 5.2.4 on 2025-07-31 10:12

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('movies', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='UserMovieInteraction',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('interaction_type', models.CharField(blank=True, choices=[('view', 'View'), ('like', 'Like'), ('dislike', 'Dislike'), ('click', 'Click'), ('rating', 'Rating'), ('favorite', 'Favorite'), ('watchlist', 'Watchlist')], max_length=50, null=True)),
                ('rating', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('feedback_type', models.CharField(blank=True, choices=[('positive', 'Positive'), ('negative', 'Negative'), ('neutral', 'Neutral')], max_length=50, null=True)),
                ('feedback_comment', models.TextField(blank=True, null=True)),
                ('metadata', models.JSONField(blank=True, null=True)),
                ('source', models.CharField(blank=True, choices=[('web', 'Web'), ('mobile', 'Mobile App'), ('email', 'Email'), ('push', 'Push Notification')], max_length=50, null=True)),
                ('timestamp', models.DateTimeField(default=django.utils.timezone.now)),
                ('movie', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='interactions', to='movies.movie')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='movie_interactions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User Movie Interaction',
                'verbose_name_plural': 'User Movie Interactions',
                'db_table': 'user_movie_interactions',
                'ordering': ['-timestamp'],
                'indexes': [models.Index(fields=['user', 'interaction_type'], name='idx_interactions_user_type'), models.Index(fields=['movie', 'interaction_type'], name='idx_interactions_movie_type'), models.Index(fields=['timestamp'], name='idx_interactions_timestamp'), models.Index(fields=['rating'], name='idx_interactions_rating'), models.Index(fields=['feedback_type'], name='idx_interactions_feedback')],
                'constraints': [models.UniqueConstraint(fields=('user', 'movie', 'interaction_type'), name='unique_user_movie_interaction')],
            },
        ),
        migrations.CreateModel(
            name='UserRecommendations',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('score', models.FloatField(default=0.0, help_text='Recommendation score for the movie')),
                ('algorithm', models.CharField(max_length=50)),
                ('generated_at', models.DateTimeField(auto_now_add=True)),
                ('clicked', models.BooleanField(default=False)),
                ('clicked_at', models.DateTimeField(blank=True, null=True)),
                ('movie', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='recommendations', to='movies.movie')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='recommendations', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User Recommendation',
                'verbose_name_plural': 'User Recommendations',
                'db_table': 'user_recommendations',
                'ordering': ['-score', '-generated_at'],
                'indexes': [models.Index(fields=['user', 'score'], name='idx_recommendations_user_score'), models.Index(fields=['generated_at'], name='idx_recommendations_generated'), models.Index(fields=['algorithm'], name='idx_recommendations_algorithm'), models.Index(fields=['clicked', 'clicked_at'], name='idx_recommendations_clicked')],
                'constraints': [models.UniqueConstraint(fields=('user', 'movie', 'algorithm'), name='unique_user_movie_algorithm')],
            },
        ),
    ]
