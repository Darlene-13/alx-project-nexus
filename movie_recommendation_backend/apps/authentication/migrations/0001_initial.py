# Generated by Django 5.2.4 on 2025-07-24 13:15

import apps.authentication.models
import django.contrib.auth.models
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('email', models.EmailField(help_text='Email address must be added here.', max_length=254, unique=True)),
                ('date_of_birth', models.DateField(blank=True, help_text='Date of birth must be added here.', null=True)),
                ('is_premium', models.BooleanField(default=False, help_text='Indicates if the user has a premium account.')),
                ('phone_number', models.CharField(help_text='Phone number must be in the format +999999999 or 999999999.', max_length=20, validators=[apps.authentication.models.validate_phone_number])),
                ('username', models.CharField(help_text='Username must be unique.', max_length=150, unique=True)),
                ('first_name', models.CharField(blank=True, help_text='First name of the user.', max_length=30)),
                ('last_name', models.CharField(blank=True, help_text='Last name of the user.', max_length=30)),
                ('preferred_timezone', models.CharField(default='GMT+3', max_length=50)),
                ('bio', models.TextField(blank=True, help_text='A short bio about the user.')),
                ('avatar', models.ImageField(blank=True, help_text="User's avatar image.", null=True, upload_to='user_avatars/')),
                ('favorite_genres', models.TextField(blank=True, help_text="A JSON array of user's favorite genres. Example: ['Action', 'Comedy', 'Drama']. This field is optional and can be left blank.", validators=[apps.authentication.models.validate_json_array])),
                ('preferred_language', models.CharField(blank=True, choices=[('en', 'English'), ('es', 'Spanish'), ('fr', 'French'), ('de', 'German'), ('zh', 'Chinese'), ('ja', 'Japanese'), ('ru', 'Russian'), ('it', 'Italian'), ('pt', 'Portuguese'), ('hi', 'Hindi'), ('ar', 'Arabic'), ('ko', 'Korean')], default='en', help_text='Preferred language of the user.', max_length=50)),
                ('country', models.CharField(blank=True, help_text='Country of the user. This field is optional and can be left blank.', max_length=100)),
                ('device_token', models.CharField(blank=True, help_text='Device token for push notifications. This field is optional and can be left blank.', max_length=255, null=True, unique=True)),
                ('device_type', models.CharField(blank=True, choices=[('android', 'Android'), ('ios', 'iOS'), ('web', 'Web')], help_text='Type of device used by the user. This field is optional and can be left blank.', max_length=50, null=True)),
                ('is_active', models.BooleanField(default=True, help_text='Indicates if the user account is active.')),
                ('is_superuser', models.BooleanField(default=False, help_text='Indicates if the user has superuser privileges.')),
                ('is_staff', models.BooleanField(default=False, help_text='Indicates if the user can access the admin site.')),
                ('date_joined', models.DateTimeField(auto_now_add=True, help_text='The date and time when the user joined.')),
                ('last_login', models.DateTimeField(default=django.utils.timezone.now, help_text='The last time the user logged in.')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='The date and time when the user was created.')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='The date and time when the user was last updated.')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
                'db_table': 'users',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['email'], name='idex_users_email'), models.Index(fields=['username'], name='idex_users_username'), models.Index(fields=['is_active'], name='idx_users_is_active'), models.Index(fields=['device_token'], name='idx_users_device_token'), models.Index(fields=['country'], name='idx_users_country'), models.Index(fields=['created_at'], name='idx_users_created_at')],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
