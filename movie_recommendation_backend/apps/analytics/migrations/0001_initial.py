# Generated by Django 5.2.4 on 2025-07-31 10:12

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('movies', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='PopularityMetrics',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('date', models.DateField(auto_now_add=True, help_text='Date for the metrics')),
                ('view_count', models.PositiveIntegerField(default=0)),
                ('like_count', models.PositiveIntegerField(default=0)),
                ('rating_count', models.PositiveIntegerField(default=0)),
                ('average_rating', models.FloatField(default=0.0)),
                ('recommendation_count', models.PositiveIntegerField(default=0)),
                ('click_through_rate', models.DecimalField(decimal_places=2, default=0.0, max_digits=5)),
                ('movie', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='popularity_metrics', to='movies.movie')),
            ],
            options={
                'verbose_name': 'Popularity Metric',
                'verbose_name_plural': 'Popularity Metrics',
                'db_table': 'popularity_metrics',
                'ordering': ['-date', '-movie'],
                'indexes': [models.Index(fields=['movie'], name='idx_popularity_movie'), models.Index(fields=['view_count'], name='idx_popularity_views'), models.Index(fields=['date'], name='idx_popularity_date'), models.Index(fields=['click_through_rate'], name='idx_popularity_ctr')],
                'constraints': [models.UniqueConstraint(fields=('movie_id', 'date'), name='unique_popularity_metrics_per_movie_per_day')],
            },
        ),
        migrations.CreateModel(
            name='UserActivityLog',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('session_id', models.CharField(blank=True, max_length=255, null=True)),
                ('action_type', models.CharField(blank=True, choices=[('movie_view', 'Movie View'), ('movie_search', 'Movie Search'), ('recommendation_click', 'Recommendation Click'), ('email_open', 'Email Open'), ('email_click', 'Email Click'), ('push_click', 'Push Click'), ('rating_submit', 'Rating Submit'), ('favorite_add', 'Favorite Add'), ('watchlist_add', 'Watchlist Add')], max_length=50, null=True)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('user_agent', models.TextField(blank=True, null=True)),
                ('referer', models.CharField(blank=True, help_text='HTTP header', max_length=255, null=True)),
                ('source', models.CharField(blank=True, max_length=50, null=True)),
                ('metadata', models.JSONField(blank=True, null=True)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('movie', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='activity_logs', to='movies.movie')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='activity_logs', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User Activity Log',
                'verbose_name_plural': 'User Activity Logs',
                'db_table': 'user_activity_logs',
                'ordering': ['-timestamp'],
                'indexes': [models.Index(fields=['user', 'action_type'], name='idx_activity_logs_user_action'), models.Index(fields=['movie_id', 'action_type'], name='idx_activity_logs_movie_action'), models.Index(fields=['timestamp'], name='idx_activity_logs_timestamp'), models.Index(fields=['session_id'], name='idx_activity_logs_session'), models.Index(fields=['source'], name='idx_activity_logs_source')],
            },
        ),
    ]
