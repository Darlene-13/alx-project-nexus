# Generated by Django 5.2.4 on 2025-07-30 10:13

import apps.movies.models
import django.core.validators
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Movie',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tmdb_id', models.IntegerField(help_text='Movie ID from TMDb API', unique=True)),
                ('imdb_id', models.CharField(blank=True, help_text='Movie ID from IMDb (e.g., tt0111161)', max_length=20, null=True, unique=True)),
                ('title', models.CharField(help_text='Movie title for display', max_length=200)),
                ('original_title', models.CharField(help_text='Original movie title in original language', max_length=200)),
                ('overview', models.TextField(blank=True, default='', help_text='Movie plot summary or description')),
                ('tagline', models.CharField(blank=True, default='', help_text='Movie tagline or promotional slogan', max_length=300)),
                ('release_date', models.DateField(blank=True, help_text='Movie release date', null=True)),
                ('runtime', models.IntegerField(blank=True, help_text='Movie duration in minutes', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(1000)])),
                ('director', models.CharField(blank=True, help_text='Main director name', max_length=200, null=True)),
                ('main_cast', models.TextField(default='[]', help_text='JSON array of main actor names', validators=[apps.movies.models.validate_json_array])),
                ('tmdb_rating', models.DecimalField(blank=True, decimal_places=1, help_text='TMDb user rating (0.0-10.0)', max_digits=3, null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(10.0)])),
                ('tmdb_vote_count', models.IntegerField(default=0, help_text='Number of votes on TMDb', validators=[django.core.validators.MinValueValidator(0)])),
                ('imdb_rating', models.DecimalField(blank=True, decimal_places=1, help_text='IMDb user rating (0.0-10.0)', max_digits=3, null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(10.0)])),
                ('our_rating', models.DecimalField(blank=True, decimal_places=1, help_text='Our platform calculated rating based on user interactions', max_digits=3, null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(10.0)])),
                ('poster_path', models.CharField(blank=True, help_text='Relative path to movie poster image on TMDb', max_length=200, null=True)),
                ('backdrop_path', models.CharField(blank=True, help_text='Relative path to movie backdrop image on TMDb', max_length=200, null=True)),
                ('popularity_score', models.FloatField(default=0.0, help_text='Popularity score for ranking and trending')),
                ('view_count', models.IntegerField(default=0, help_text='Number of times this movie was viewed on our platform', validators=[django.core.validators.MinValueValidator(0)])),
                ('like_count', models.IntegerField(default=0, help_text='Number of users who liked this movie', validators=[django.core.validators.MinValueValidator(0)])),
                ('adult', models.BooleanField(default=False, help_text='Whether this movie contains adult content')),
                ('original_language', models.CharField(help_text='Original language code (e.g., en, es, fr)', max_length=10)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='When this movie was added to our database')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='When this movie was last updated')),
            ],
            options={
                'verbose_name': 'Movie',
                'verbose_name_plural': 'Movies',
                'db_table': 'movies',
                'ordering': ['-popularity_score', '-release_date'],
            },
        ),
        migrations.CreateModel(
            name='Genre',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tmdb_id', models.IntegerField(help_text='Genre ID from TMDb API', unique=True)),
                ('name', models.CharField(help_text='Genre name (e.g., Action, Comedy, Drama)', max_length=100, unique=True)),
                ('slug', models.SlugField(help_text='URL-friendly genre identifier', unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='When this genre was added to our database')),
            ],
            options={
                'verbose_name': 'Genre',
                'verbose_name_plural': 'Genres',
                'db_table': 'genres',
                'ordering': ['name'],
                'indexes': [models.Index(fields=['tmdb_id'], name='idx_genres_tmdb_id'), models.Index(fields=['slug'], name='idx_genres_slug'), models.Index(fields=['name'], name='idx_genres_name')],
            },
        ),
        migrations.CreateModel(
            name='MovieGenre',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('genre', models.ForeignKey(help_text='Genre in this relationship', on_delete=django.db.models.deletion.CASCADE, related_name='movie_genres', to='movies.genre')),
                ('movie', models.ForeignKey(help_text='Movie in this relationship', on_delete=django.db.models.deletion.CASCADE, related_name='movie_genres', to='movies.movie')),
            ],
            options={
                'verbose_name': 'Movie Genre',
                'verbose_name_plural': 'Movie Genres',
                'db_table': 'movie_genres',
            },
        ),
        migrations.AddField(
            model_name='movie',
            name='genres',
            field=models.ManyToManyField(blank=True, help_text='Genres associated with this movie', related_name='movies', through='movies.MovieGenre', to='movies.genre'),
        ),
        migrations.AddIndex(
            model_name='moviegenre',
            index=models.Index(fields=['movie'], name='idx_movie_genres_movie'),
        ),
        migrations.AddIndex(
            model_name='moviegenre',
            index=models.Index(fields=['genre'], name='idx_movie_genres_genre'),
        ),
        migrations.AddConstraint(
            model_name='moviegenre',
            constraint=models.UniqueConstraint(fields=('movie', 'genre'), name='unique_movie_genre'),
        ),
        migrations.AddIndex(
            model_name='movie',
            index=models.Index(fields=['tmdb_id'], name='idx_movies_tmdb_id'),
        ),
        migrations.AddIndex(
            model_name='movie',
            index=models.Index(fields=['title'], name='idx_movies_title'),
        ),
        migrations.AddIndex(
            model_name='movie',
            index=models.Index(fields=['-release_date'], name='idx_movies_release_date'),
        ),
        migrations.AddIndex(
            model_name='movie',
            index=models.Index(fields=['-popularity_score'], name='idx_movies_popularity'),
        ),
        migrations.AddIndex(
            model_name='movie',
            index=models.Index(fields=['-tmdb_rating'], name='idx_movies_rating'),
        ),
        migrations.AddIndex(
            model_name='movie',
            index=models.Index(fields=['original_language'], name='idx_movies_language'),
        ),
        migrations.AddIndex(
            model_name='movie',
            index=models.Index(fields=['adult'], name='idx_movies_adult'),
        ),
        migrations.AddIndex(
            model_name='movie',
            index=models.Index(fields=['-created_at'], name='idx_movies_created_at'),
        ),
    ]
