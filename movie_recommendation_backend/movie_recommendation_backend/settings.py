"""
Django settings for movie_recommendation_backend project.

Generated by 'django-admin startproject' using Django 5.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os
from dotenv import load_dotenv
from datetime import timedelta
import sentry_sdk


load_dotenv() 


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('MOVIE_RECOMMENDATION_BACKEND_SECRET', 'your-default-secret-key')
# USER MODEL
AUTH_USER_MODEL = 'authentication.User'
# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = [
    '127.0.0.1',
    'localhost',
    'testserver',
    '0.0.0.0',
    'alx-project-nexus-y0c5.onrender.com', 
]

# CRSF Settings
CSRF_TRUSTED_ORIGINS = [
    'https://alx-project-nexus-y0c5.onrender.com',
    'http://localhost:8000',
    'http://127.0.0.1:8000',
]


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # Installed apps
    'rest_framework',
    'drf_yasg',
    'corsheaders',
    'rest_framework_simplejwt',
    'django_filters',
    'rangefilter',

    # Local apps
    'apps.movies',
    'apps.notifications',
    'apps.analytics',
    'apps.authentication',
    'apps.recommendations',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'apps.analytics.middleware_old.google_analytics.GoogleAnalyticsMiddleware',
    'apps.analytics.middleware.UserActivityLoggingMiddleware',
]

# Allow your Streamlit app to make requests
CORS_ALLOWED_ORIGINS = [
    "https://alx-project-nexus-cqkj4zcbr3tmoecty9gxvz.streamlit.app/",
    "https://alx-project-nexus-y0c5.onrender.com",  # For production
    "http://localhost:8501",  # For local development
]

# Or for testing (less secure):
CORS_ALLOW_ALL_ORIGINS = True

# Allow credentials
CORS_ALLOW_CREDENTIALS = True

# Allow headers
CORS_ALLOW_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
]
ROOT_URLCONF = 'movie_recommendation_backend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]


WSGI_APPLICATION = 'movie_recommendation_backend.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases



DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.getenv('POSTGRES_DB'),
        'USER': os.getenv('POSTGRES_USER'),
        'PASSWORD': os.getenv('POSTGRES_PASSWORD'),
        'HOST': os.getenv('POSTGRES_HOST'),
        'PORT': os.getenv('POSTGRES_PORT'),


    }
}

REDIS_URL = os.getenv("REDIS_URL", "redis://127.0.0.1:6379")

CACHES = {
    'default': {
        'BACKEND': 'django_redis.cache.RedisCache',
        'LOCATION': REDIS_URL,
        'OPTIONS': {
            'CLIENT_CLASS': 'django_redis.client.DefaultClient',
            'SERIALIZER': 'django_redis.serializers.pickle.PickleSerializer',
            'CONNECTION_POOL_KWARGS': {
                'max_connections': 50,
                'retry_on_timeout': True,
            },
            'COMPRESSOR': 'django_redis.compressors.zlib.ZlibCompressor',
            'IGNORE_EXCEPTIONS': True,  # Don't break the site if Redis is down
        },
        'KEY_PREFIX': 'property_listings',  # Prefix for all cache keys to avoid conflicts
        'VERSION': 1,
        'TIMEOUT': 60*15,  # Default timeout of 15 minutes
    }
}

#Cache settings
CACHE_MIDDLEWARE_ALIAS = 'default'
CACHE_MIDDLEWARE_SECONDS = 60*15 # 15 Minutes
CACHE_MIDDLEWARE_KEY_PREFIX = 'property_listings'

# Session engine configuration
SESSION_ENGINE = 'django.contrib.sessions.backends.cache'
SESSION_CACHE_ALIAS = 'default'

SESSION_COOKIE_SECURE = True
CSRF_COOKIE_SECURE = True

# Swagger settings
SWAGGER_SETTINGS = {
    'SECURITY_DEFINITIONS': {
        'Bearer': {
            'type': 'apiKey',
            'name': 'Authorization',
            'in': 'header'
        }
    },
    'USE_SESSION_AUTH': False,
    'JSON_EDITOR': True,
    'SUPPORTED_SUBMIT_METHODS': [
        'get', 'post', 'put', 'delete', 'patch'
    ],
    'OPERATIONS_SORTER': 'alpha',
    'TAGS_SORTER': 'alpha',
    'DOC_EXPANSION': 'none',
    'DEEP_LINKING': True,
    'SHOW_EXTENSIONS': True,
    'DEFAULT_MODEL_RENDERING': 'example'
}

# JWT Authentication settings
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=60),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=7),
    'ROTATE_REFRESH_TOKENS': True,
    'BLACKLIST_AFTER_ROTATION': True,
    'ALGORITHM': 'HS256',
    'SIGNING_KEY': SECRET_KEY,
    'VERIFYING_KEY': None,
    'AUTH_HEADER_TYPES': ('Bearer',),
    'AUTH_HEADER_NAME': 'HTTP_AUTHORIZATION',
    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'user_id',
    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
    'TOKEN_TYPE_CLAIM': 'token_type',
}

# DRF settings
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',
        'rest_framework.renderers.BrowsableAPIRenderer',
    ],
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 20
}

# Email settings for Brevo (Sendinblue)
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp-relay.brevo.com'
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = os.getenv('BREVO_HOST_USER', '9459bf001@smtp-brevo.com')
EMAIL_HOST_PASSWORD = os.getenv('BREVO_SMTP_KEY', 'your-brevo-smtp-key')
DEFAULT_FROM_EMAIL = '  Movie Recommendation <darlenenasimiyu@gmail.com>'


# Email settings
EMAIL_TIMEOUT = 30
EMAIL_SUBJECT_PREFIX = '[MovieRec] '


# Google Analytics 4 Configuration
GOOGLE_ANALYTICS = {
    'MEASUREMENT_ID': os.getenv('GA_MEASUREMENT_ID', default=''),
    'API_SECRET': os.getenv('GA_API_KEY', default=''),
    'ENABLED': os.getenv('GA_ENABLED', default=True),
    'TRACK_AUTHENTICATED_USERS': os.getenv('GA_TRACK_AUTH_USERS', default=True),
    'BATCH_SIZE': os.getenv('GA_BATCH_SIZE', default=25),
    'TIMEOUT': os.getenv('GA_TIMEOUT', default=5),
}


# External API Settings
TMDB_API_KEY = os.getenv('TMDB_API_KEY')
OMDB_API_KEY = os.getenv('OMDB_API_KEY')
TMDB_BASE_URL = os.getenv('TMDB_BASE_URL', 'https://api.themoviedb.org/3')  # Default fallback
OMDB_BASE_URL = os.getenv('OMDB_BASE_URL', 'https://www.omdbapi.com')      # Default fallback

# RATE LIMITS
API_RATE_LIMIT = {
    'tmdb': {
        'requests_per_second': 40,  # 40 requests per second
        'requests_per_day': 1000000,
    },
    'omdb': {
        'requests_per_second': 1,
        'requests_per_day': 1000,
    }
}

# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# For development
#STATICFILES_DIRS = [ os.path.join(BASE_DIR, 'static'),
#]

# Media files configuration
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


#LOGGING CONFIGURATION
# Logging Configuration
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {asctime} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'level': 'INFO',
            'class': 'logging.StreamHandler',
            'formatter': 'simple'
        },
        'file': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': os.path.join(BASE_DIR, 'logs', 'django.log'),
            'formatter': 'verbose',
        },
        'analytics_file': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': os.path.join(BASE_DIR, 'logs', 'analytics.log'),
            'formatter': 'verbose',
        },
    },
    'loggers': {
        'analytics.middleware': {
            'handlers': ['console', 'analytics_file'],
            'level': 'DEBUG',
            'propagate': False,
        },
        'analytics': {
            'handlers': ['console', 'analytics_file'],
            'level': 'INFO',
            'propagate': False,
        },
        'django': {
            'handlers': ['console', 'file'],
            'level': 'INFO',
            'propagate': False,
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'WARNING',
    },
}

# Create logs directory if it doesn't exist
LOGS_DIR = os.path.join(BASE_DIR, 'logs')
if not os.path.exists(LOGS_DIR):
    os.makedirs(LOGS_DIR)


# Celery Configuration
CELERY_BROKER_URL = os.environ.get('CELERY_BROKER_URL', 'redis://redis:6379/0')
CELERY_RESULT_BACKEND = os.environ.get('CELERY_RESULT_BACKEND', 'redis://redis:6379/0')
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = 'UTC'
CELERY_ENABLE_UTC = True
# Celery Settings
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = 'UTC'
CELERY_ENABLE_UTC = True

# Task routing
CELERY_TASK_ROUTES = {
    'apps.notifications.tasks.*': {'queue': 'notifications'},
    'apps.analytics.tasks.*': {'queue': 'analytics'},
    'apps.movies.tasks.*': {'queue': 'recommendations'},
}

# Retry configuration
CELERY_BROKER_URL = 'redis://redis:6379/0'  
CELERY_RESULT_BACKEND = 'redis://redis:6379/0'
CELERY_TASK_RETRY_DELAY = 60  # Retry after 60 seconds
CELERY_TASK_MAX_RETRIES = 3

# Beat schedule for periodic tasks
CELERY_BEAT_SCHEDULE = {
    'send-weekly-digest': {
        'task': 'apps.notifications.tasks.send_weekly_digest_to_all_users',
        'schedule': 604800.0,  # Weekly (in seconds)
        # 'schedule': crontab(day_of_week=1, hour=9, minute=0),  # Every Monday at 9 AM
    },
    'update-movie-popularity': {
        'task': 'analytics.tasks.update_daily_popularity_metrics',
        'schedule': 86400.0,  # Daily (in seconds)
        # 'schedule': crontab(hour=1, minute=0),  # Every day at 1 AM
    },
    'cleanup-old-analytics': {
        'task': 'analytics.tasks.cleanup_old_analytics_data',
        'schedule': 604800.0,  # Weekly
    },
}

# Optional: Redis-specific settings
CELERY_REDIS_MAX_CONNECTIONS = 20

sentry_sdk.init(
    dsn="https://6ed80536f888ca5fc0dbe6f65aeff254@o4509815140515840.ingest.us.sentry.io/4509816410275840",
    # Add data like request headers and IP for users,
    # see https://docs.sentry.io/platforms/python/data-management/data-collected/ for more info
    send_default_pii=True,
)
